// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// _BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonFX;
import com.ctre.phoenix.motorcontrol.FeedbackDevice;
import com.ctre.phoenix.motorcontrol.NeutralMode;
import com.ctre.phoenix.motorcontrol.StatusFrameEnhanced;

import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.motorcontrol.MotorControllerGroup;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class DriveTrain extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // _BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private WPI_TalonFX rightMaster;
private WPI_TalonFX rightSlave;
private MotorControllerGroup rightGroup;
private WPI_TalonFX leftMaster;
private WPI_TalonFX leftSlave;
private MotorControllerGroup leftGroup;
private DifferentialDrive differentialDrive1;
private double kUnitsPerRevoltion = 2048;
private double kWheelDiameter_Inch = 6.0;
private double kGearRatio = 12.45;


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public DriveTrain() {
        // _BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
rightMaster = new WPI_TalonFX(0);
 
    /* Factory default hardware to prevent unexpected behavior */
rightMaster.configFactoryDefault();
rightMaster.configSelectedFeedbackSensor(FeedbackDevice.IntegratedSensor);
        /* Invert Motor? and set Break Mode */
rightMaster.setInverted(false);
rightMaster.setNeutralMode(NeutralMode.Coast);

        /* Set the peak and nominal outputs */
rightMaster.configNominalOutputForward(0, 30);
rightMaster.configNominalOutputReverse(0, 30);
rightMaster.configPeakOutputForward(1, 30);
rightMaster.configPeakOutputReverse(-1, 30);
        
rightMaster.setStatusFramePeriod(StatusFrameEnhanced.Status_2_Feedback0, 20);

rightSlave = new WPI_TalonFX(1);
 
    /* Factory default hardware to prevent unexpected behavior */
rightSlave.configFactoryDefault();
rightSlave.configSelectedFeedbackSensor(FeedbackDevice.IntegratedSensor);
        /* Invert Motor? and set Break Mode */
rightSlave.setInverted(false);
rightSlave.setNeutralMode(NeutralMode.Coast);

        /* Set the peak and nominal outputs */
rightSlave.configNominalOutputForward(0, 30);
rightSlave.configNominalOutputReverse(0, 30);
rightSlave.configPeakOutputForward(1, 30);
rightSlave.configPeakOutputReverse(-1, 30);
        
rightSlave.setStatusFramePeriod(StatusFrameEnhanced.Status_2_Feedback0, 20);

rightGroup = new MotorControllerGroup(rightMaster, rightSlave  );
 addChild("RightGroup",rightGroup);
 

leftMaster = new WPI_TalonFX(2);
 
    /* Factory default hardware to prevent unexpected behavior */
leftMaster.configFactoryDefault();
leftMaster.configSelectedFeedbackSensor(FeedbackDevice.IntegratedSensor);
        /* Invert Motor? and set Break Mode */
leftMaster.setInverted(true);
leftMaster.setNeutralMode(NeutralMode.Coast);

        /* Set the peak and nominal outputs */
leftMaster.configNominalOutputForward(0, 30);
leftMaster.configNominalOutputReverse(0, 30);
leftMaster.configPeakOutputForward(1, 30);
leftMaster.configPeakOutputReverse(-1, 30);
        
leftMaster.setStatusFramePeriod(StatusFrameEnhanced.Status_2_Feedback0, 20);

leftSlave = new WPI_TalonFX(3);
 
    /* Factory default hardware to prevent unexpected behavior */
leftSlave.configFactoryDefault();
leftSlave.configSelectedFeedbackSensor(FeedbackDevice.IntegratedSensor);
        /* Invert Motor? and set Break Mode */
leftSlave.setInverted(true);
leftSlave.setNeutralMode(NeutralMode.Coast);

        /* Set the peak and nominal outputs */
leftSlave.configNominalOutputForward(0, 30);
leftSlave.configNominalOutputReverse(0, 30);
leftSlave.configPeakOutputForward(1, 30);
leftSlave.configPeakOutputReverse(-1, 30);
        
leftSlave.setStatusFramePeriod(StatusFrameEnhanced.Status_2_Feedback0, 20);

leftGroup = new MotorControllerGroup(leftMaster, leftSlave  );
 addChild("LeftGroup",leftGroup);
 

differentialDrive1 = new DifferentialDrive(rightGroup, leftGroup);
 addChild("Differential Drive 1",differentialDrive1);
 differentialDrive1.setSafetyEnabled(true);
differentialDrive1.setExpiration(0.1);
differentialDrive1.setMaxOutput(1.0);



    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run
        SmartDashboard.putNumber("Right Motor Rotation", my_getRight_Motor_Rotations());
        SmartDashboard.putNumber("Right Distance Inches", my_getRight_Distance_Inches());
        differentialDrive1.feed();
    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void my_DriveTank(double LeftSpeed, double RightSpeed){
        differentialDrive1.tankDrive(LeftSpeed, RightSpeed);
    }

    public double my_getRightEncoderCounts(){
        return rightMaster.getSelectedSensorPosition(0); /* position units */
    }
    public double my_getlLeftEncoderCounts(){
        return leftMaster.getSelectedSensorPosition(0); /* position units */
    }
    public double my_getRight_Motor_Rotations(){
        return my_getRightEncoderCounts()/ kUnitsPerRevoltion;
    }
    public double my_getRight_Distance_Inches(){
        return (my_getRight_Motor_Rotations() / kGearRatio) * (kWheelDiameter_Inch * Math.PI);
    }

    //reset encoders
    public void my_resetRightEncoder(){
        rightMaster.setSelectedSensorPosition(0);
        
    }
    
    
  
}

