// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: RobotContainer.

package frc.robot;

import frc.robot.commands.*;
import frc.robot.subsystems.*;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.InstantCommand;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj2.command.button.JoystickButton;
import frc.robot.subsystems.*;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 * This class is where the bulk of the robot should be declared.  Since Command-based is a
 * "declarative" paradigm, very little robot logic should actually be handled in the {@link Robot}
 * periodic methods (other than the scheduler calls).  Instead, the structure of the robot
 * (including subsystems, commands, and button mappings) should be declared here.
 */
public class RobotContainer {

  private static RobotContainer m_robotContainer = new RobotContainer();

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
// The robot's subsystems
    public final Shooter m_shooter = new Shooter();
    public final FrontElevator m_frontElevator = new FrontElevator();
    public final Tower m_tower = new Tower();
    public final Intake m_intake = new Intake();
    public final DriveTrain m_driveTrain = new DriveTrain();

// Joysticks
private final Joystick joystickCoDriver = new Joystick(2);
private final Joystick joystickRight = new Joystick(1);
private final Joystick joystickLeft = new Joystick(0);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

  
  // A chooser for autonomous commands
  SendableChooser<Command> m_chooser = new SendableChooser<>();

  /**
  * The container for the robot.  Contains subsystems, OI devices, and commands.
  */
  private RobotContainer() {
        // _BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Smartdashboard Subsystems


    // SmartDashboard Buttons
    //SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
    //SmartDashboard.putData("DriveWithJoysticks", new DriveWithJoysticks( m_driveTrain ));
    /* SmartDashboard.putData("ShooterRun: Hi_ShooterSetpoint", new ShooterRun(1, m_shooter));
    SmartDashboard.putData("ShooterRun: Rev_ShooterSetpoint", new ShooterRun(-1, m_shooter));
    SmartDashboard.putData("ShooterRun: Lo_ShooterSetpoint", new ShooterRun(.5, m_shooter));
 */
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    SmartDashboard.putData("Reset Drive Encoders", new DriveTrain_Reset_Encoders(m_driveTrain));

    SmartDashboard.putData("Drive Distance", new DriveDistance(12, .5, .5, m_driveTrain));
    // Configure the button bindings
    configureButtonBindings();

    // Configure default commands
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND
    m_frontElevator.setDefaultCommand(new FrontElevatorRun(0, m_frontElevator) );
    m_tower.setDefaultCommand(new TowerRun(0, m_tower) );
    m_intake.setDefaultCommand(new InakeRun(0, m_intake) );
   // m_driveTrain.setDefaultCommand(new DriveWithJoysticks(0, 0, m_driveTrain) );


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND
    m_driveTrain.setDefaultCommand(new DriveWithJoysticks(() -> joystickLeft.getY(), () -> joystickRight.getY(), m_driveTrain));
    // Configure autonomous sendable chooser
        // _BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    m_chooser.addOption("Auto Two Ball", new Auto_Two_Ball(m_shooter, m_tower, m_driveTrain, m_intake));    
    m_chooser.setDefaultOption("Shoot and Drive", new Auto_Shoot_and_Drive(m_shooter, m_tower, m_driveTrain));

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    SmartDashboard.putData("Auto Mode", m_chooser);
  }

  public static RobotContainer getInstance() {
    return m_robotContainer;
  }

  /**
   * Use this method to define your button->command mappings.  Buttons can be created by
   * instantiating a {@link GenericHID} or one of its subclasses ({@link
   * edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then passing it to a
   * {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.
   */
  private void configureButtonBindings() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
// Create some buttons
final JoystickButton joystickCo_TowerDn = new JoystickButton(joystickCoDriver, 2);        
joystickCo_TowerDn.whileHeld(new TowerRun(-1, m_tower) ,true);
  //  SmartDashboard.putData("JoystickCo_TowerDn",new TowerRun(-1, m_tower) );

final JoystickButton joystickCo_TowerUp = new JoystickButton(joystickCoDriver, 1);        
joystickCo_TowerUp.whileHeld(new TowerRun(1, m_tower) ,true);
 //   SmartDashboard.putData("JoystickCo_TowerUp",new TowerRun(1, m_tower) );

final JoystickButton joystickCo_FrontElevatorDn = new JoystickButton(joystickCoDriver, 4);        
joystickCo_FrontElevatorDn.whileHeld(new FrontElevatorRun(-1, m_frontElevator) ,true);
  //  SmartDashboard.putData("JoystickCo_FrontElevatorDn",new FrontElevatorRun(-1, m_frontElevator) );

final JoystickButton joystickCo_FrontElevatorUp = new JoystickButton(joystickCoDriver, 3);        
joystickCo_FrontElevatorUp.whileHeld(new FrontElevatorRun(1, m_frontElevator) ,true);
 //   SmartDashboard.putData("JoystickCo_FrontElevatorUp",new FrontElevatorRun(1, m_frontElevator) );

final JoystickButton joystickRight_ShooterRev = new JoystickButton(joystickRight, 3);        
joystickRight_ShooterRev.whileHeld(new ShooterRun(-1, m_shooter) ,true);
  //  SmartDashboard.putData("JoystickRight_ShooterRev",new ShooterRun(-1, m_shooter) );

final JoystickButton joystickRight_ShooterLo = new JoystickButton(joystickRight, 2);        
joystickRight_ShooterLo.whileHeld(new ShooterRun(.5, m_shooter) ,true);
 //   SmartDashboard.putData("JoystickRight_ShooterLo",new ShooterRun(.5, m_shooter) );

final JoystickButton joystickRight_ShooterHi = new JoystickButton(joystickRight, 1);        
joystickRight_ShooterHi.whileHeld(new ShooterRun(1, m_shooter) ,true);
  //  SmartDashboard.putData("JoystickRight_ShooterHi",new ShooterRun(1, m_shooter) );

final JoystickButton joystickLeft_Intake_Rev = new JoystickButton(joystickLeft, 2);        
joystickLeft_Intake_Rev.whileHeld(new InakeRun(1, m_intake) ,true);
 //   SmartDashboard.putData("JoystickLeft_Intake_Rev",new InakeRun(-1, m_intake) );

final JoystickButton joystickLeft_Intake = new JoystickButton(joystickLeft, 1);        
joystickLeft_Intake.toggleWhenPressed(new InakeRun(-1, m_intake) ,true);
  //  SmartDashboard.putData("JoystickLeft_Intake",new InakeRun(1, m_intake) );



    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
  }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
public Joystick getJoystickLeft() {
        return joystickLeft;
    }

public Joystick getJoystickRight() {
        return joystickRight;
    }

public Joystick getJoystickCoDriver() {
        return joystickCoDriver;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

  /**
   * Use this to pass the autonomous command to the main {@link Robot} class.
   *
   * @return the command to run in autonomous
  */
  public Command getAutonomousCommand() {
    // The selected command will be run in autonomous
    return m_chooser.getSelected();
  }
  

}



